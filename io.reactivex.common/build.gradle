ext.moduleName = "io.reactivex.common"

sourceSets {
    main.java.srcDirs = ['io.reactivex.common/src']
}


    buildscript {
        repositories {
            jcenter()
            mavenCentral()
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
    }


    configurations {
        umlDoclet
    }

    group = "io.reactivex.rxjava2"
    ext.githubProjectName = "rxjava"

    version = project.properties["release.version"]

    if (releaseTag != null && !releaseTag.isEmpty()) {
        if (releaseTag.startsWith("v")) {
            releaseTag = releaseTag.substring(1);
        }
        version = releaseTag;
        project.properties.put("release.version", releaseTag);

        println("Releasing with version " + version);
    }

    description = "RxJava: Reactive Extensions for the JVM â€“ a library for composing asynchronous and event-based programs using observable sequences for the Java VM."

    apply plugin: "java-library"
    apply plugin: "checkstyle"
    apply plugin: "jacoco"
    apply plugin: "ru.vyarus.animalsniffer"
    apply plugin: "maven"
    apply plugin: "osgi"
    apply plugin: "me.champeau.gradle.jmh"
    apply plugin: "com.github.hierynomus.license"
    apply plugin: "com.jfrog.bintray"
    apply plugin: "com.jfrog.artifactory"
    apply plugin: "eclipse"

    sourceCompatibility = JavaVersion.VERSION_1_9
    targetCompatibility = JavaVersion.VERSION_1_9

    repositories {
        mavenCentral()
    }

    dependencies {
        signature "org.codehaus.mojo.signature:java16:1.1@signature"

        api "org.reactivestreams:reactive-streams:$reactiveStreamsVersion"
        api "org.reactivestreams:reactive-streams-tck:$reactiveStreamsVersion"
        api "org.reactivestreams:reactive-streams-examples:$reactiveStreamsVersion"
        jmh "org.reactivestreams:reactive-streams:$reactiveStreamsVersion"

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.1'
        testImplementation "org.mockito:mockito-core:$mockitoVersion"

        testImplementation "org.reactivestreams:reactive-streams-tck:$reactiveStreamsVersion"
        testImplementation "org.testng:testng:$testNgVersion"
        testImplementation "com.google.guava:guava:$guavaVersion"
    }

    compileJava {
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath
            ]
            classpath = files()
        }
    }

    javadoc {
        doFirst {
            options.addStringOption('-module-path', classpath.asPath)
            options.addStringOption("-class-path", "")
        }
        failOnError = false
        exclude "**/internal/**"
        exclude "**/test/**"
        exclude "**/perf/**"
        exclude "**/jmh/**"
        options {
            windowTitle = "RxJava Javadoc ${project.version}"
        }
        // Clear the following options to make the docs consistent with the old format
        options.addStringOption("top").value = ""
        options.addStringOption("doctitle").value = ""
        options.addStringOption("header").value = ""
        options.addStringOption("-source-path").value = "src/main/java"
        options.stylesheetFile = new File(projectDir, "gradle/stylesheet.css");
        options.docletpath = configurations.umlDoclet.files.asType(List)
        options.doclet = "nl.talsmasoftware.umldoclet.UMLDoclet"
        source = sourceSets.main.allJava


        options.links(
                "https://docs.oracle.com/javase/7/docs/api/",
                "http://www.reactive-streams.org/reactive-streams-${reactiveStreamsVersion}-javadoc/"
        )


        if (JavaVersion.current().isJava7()) {
            // "./gradle/stylesheet.css" only supports Java 7
            options.addStringOption("stylesheetfile", rootProject.file("./gradle/stylesheet.css").toString())
        }
    }

    animalsniffer {
        annotation = "io.reactivex.internal.util.SuppressAnimalSniffer"
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    jar {
        manifest {
            name = "io.reactivex.common"
            instruction "Bundle-Vendor", "RxJava Contributors"
            instruction "Bundle-DocURL", "https://github.com/ReactiveX/RxJava"
            instruction "Import-Package", "!org.junit,!junit.framework,!org.mockito.*,!org.testng.*,*"
            instruction "Eclipse-ExtensibleAPI", "true"
            instruction "Automatic-Module-Name", "io.reactivex.common"
        }
    }

    license {
        header rootProject.file("HEADER")
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        skipExistingHeaders true
        ignoreFailures true
        excludes(["**/*.md", "**/*.txt"])
    }

    apply plugin: "maven-publish"

    install {
        repositories.mavenInstaller.pom.project {
            name "RxJava"
            description "Reactive Extensions for Java"
            url "https://github.com/ReactiveX/RxJava"
            licenses {
                license {
                    name "The Apache Software License, Version 2.0"
                    url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    distribution "repo"
                }
            }
            developers {
                developer {
                    id "akarnokd"
                    name "David Karnok"
                    email "akarnokd@gmail.com"
                }
            }
            scm {
                connection "scm:git:git@github.com:ReactiveX/RxJava.git"
                url "scm:git:git@github.com:ReactiveX/RxJava.git"
                developerConnection "scm:git:git@github.com:ReactiveX/RxJava.git"
            }
            issueManagement {
                system "github"
                url "https://github.com/ReactiveX/RxJava/issues"
            }
        }
    }

// Reactive-Streams as compile dependency
    publishing.publications.all {
        pom.withXml {
            asNode().dependencies."*".findAll() {
                it.scope.text() == "runtime" && project.configurations.compile.allDependencies.find { dep ->
                    dep.name == it.artifactId.text()
                }
            }.each { it.scope*.value = "compile" }
        }
    }

    jmh {
        jmhVersion = jmhLibVersion
        humanOutputFile = null
        includeTests = false
        jvmArgs = ["-Djmh.ignoreLock=true"]
        jvmArgsAppend = ["-Djmh.separateClasspathJAR=true"]

        if (project.hasProperty("jmh")) {
            include = ".*" + project.jmh + ".*"
            println("JMH: " + include);
        }

    }

    plugins.withType(EclipsePlugin) {
        project.eclipse.classpath.plusConfigurations += [configurations.jmh]
    }

    test {

        testLogging {
            // showing skipped occasionally should prevent CI timeout due to lack of standard output
            events = ["skipped", "failed"] // "started", "passed"
            // showStandardStreams = true
            exceptionFormat = "full"

            debug.events = ["skipped", "failed"]
            debug.exceptionFormat = "full"

            info.events = ["failed", "skipped"]
            info.exceptionFormat = "full"

            warn.events = ["failed", "skipped"]
            warn.exceptionFormat = "full"
        }

        maxHeapSize = "1200m"

        if (System.getenv("CI") == null) {
            maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        }
    }

    check.dependsOn testng

    jacoco {
        toolVersion = jacocoVersion // See http://www.eclemma.org/jacoco/.
    }

    testng.dependsOn GCandMem2

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }

        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: ["io/reactivex/tck/**"])
            })
        }
    }

    jacocoTestReport.dependsOn GCandMem

    build.dependsOn jacocoTestReport

    checkstyle {
        configFile file("checkstyle.xml")
        ignoreFailures = true
        toolVersion = "8.14"
    }

    if (rootProject.hasProperty("releaseMode")) {

        if ("branch".equals(rootProject.releaseMode)) {
            // From https://github.com/ReactiveX/RxAndroid/blob/2.x/rxandroid/build.gradle#L94

            println("ReleaseMode: " + rootProject.releaseMode);
            artifactory {
                contextUrl = "https://oss.jfrog.org"

                publish {
                    repository {
                        repoKey = "oss-snapshot-local"

                        username = rootProject.bintrayUser
                        password = rootProject.bintrayKey
                    }

                    defaults {
                        publishConfigs("archives")
                    }
                }
            }

            build.finalizedBy(artifactoryPublish)
        }

        if ("full".equals(rootProject.releaseMode)) {
            // based on https://github.com/bintray/gradle-bintray-plugin
            def rver = version;

            println("ReleaseMode: " + rootProject.releaseMode + " version " + rver);

            bintray {
                user = rootProject.bintrayUser
                key = rootProject.bintrayKey
                configurations = ["archives"]
                publish = true
                pkg {
                    repo = "RxJava"
                    name = "RxJava"
                    userOrg = "reactivex"
                    labels = ["rxjava", "reactivex"]
                    licenses = ["Apache-2.0"]
                    vcsUrl = "https://github.com/ReactiveX/RxJava.git"
                    version {
                        name = rver
                        gpg {
                            sign = true
                        }
                        mavenCentralSync {
                            sync = true
                            user = rootProject.sonatypeUsername
                            password = rootProject.sonatypePassword
                            close = "1"
                        }
                    }
                }
            }

            build.finalizedBy(bintrayUpload)
        }
    }

    subprojects {
        afterEvaluate {
            repositories {
                jcenter()
            }

            compileJava {
                inputs.property("moduleName", moduleName)
                doFirst {
                    options.compilerArgs = [
                            '--module-path', classpath.asPath,
                    ]
                    classpath = files()
                }
            }
        }
    }

