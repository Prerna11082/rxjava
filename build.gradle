buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "ru.vyarus:gradle-animalsniffer-plugin:1.2.0"
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
        classpath "me.champeau.gradle:jmh-gradle-plugin:0.4.5"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.5.2"
    }
}

apply plugin: "java-library"
apply plugin: "maven"
apply plugin: "eclipse"


subprojects {
 	repositories {
 		jcenter()
    	mavenCentral()
    	maven {
	        url "https://plugins.gradle.org/m2/"
	    }
  	}
  	
  	apply plugin: "java-library"
	apply plugin: "maven"
	apply plugin: "eclipse"

	sourceCompatibility = JavaVersion.VERSION_1_9
	targetCompatibility = JavaVersion.VERSION_1_9

	if(project.name.startsWith('io.reactivex.core')){
		dependencies{
			compile project (':io.reactivex.common')
		}
	}

	def reactiveStreamsVersion = "1.0.2"

	dependencies {
    	api "org.reactivestreams:reactive-streams:$reactiveStreamsVersion"
    	api "org.reactivestreams:reactive-streams-tck:$reactiveStreamsVersion"
    	api "org.reactivestreams:reactive-streams-examples:$reactiveStreamsVersion"
	}

	sourceSets {
		main.java.srcDirs = ['src']
	}    
	
	compileJava {
    	doFirst {
        	options.compilerArgs = [
             	'--module-path', classpath.asPath
        	]
        	classpath = files()
    	}
	}
}

dependencies{
			compile project (':io.reactivex.core')
		}

apply plugin: "checkstyle"
apply plugin: "jacoco"
apply plugin: "ru.vyarus.animalsniffer"
apply plugin: "maven"
apply plugin: "osgi"
apply plugin: "me.champeau.gradle.jmh"
apply plugin: "com.github.hierynomus.license"
apply plugin: "com.jfrog.bintray"
apply plugin: "com.jfrog.artifactory"


repositories {
 		jcenter()
    	mavenCentral()
    	maven {
	        url "https://plugins.gradle.org/m2/"
	    }
  	}
group = "io.reactivex.rxjava2"
ext.githubProjectName = "rxjava"
version = project.properties["release.version"]
jar.enabled = false

// Dependency versions
// ---------------------------------------

def junitVersion = "5.0"
def reactiveStreamsVersion = "1.0.2"
def mockitoVersion = "2.1.0"
def jmhLibVersion = "1.20"
def testNgVersion = "6.11"
def guavaVersion = "24.0-jre"
def jacocoVersion = "0.8.0"
// --------------------------------------

dependencies {
    signature "org.codehaus.mojo.signature:java16:1.1@signature"


    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.1'
    testImplementation "org.mockito:mockito-core:$mockitoVersion"

    testImplementation "org.reactivestreams:reactive-streams-tck:$reactiveStreamsVersion"
    testImplementation "org.testng:testng:$testNgVersion"
    testImplementation "com.google.guava:guava:$guavaVersion"
}


javadoc {
    doFirst {
        options.addStringOption('-module-path', classpath.asPath)
        options.addStringOption("-class-path", "")
    }
    failOnError = false
    exclude "**/internal/**"
    exclude "**/test/**"
    exclude "**/perf/**"
    exclude "**/jmh/**"
    options {
        windowTitle = "RxJava Javadoc ${project.version}"
    }
    // Clear the following options to make the docs consistent with the old format
    options.addStringOption("top").value = ""
    options.addStringOption("doctitle").value = ""
    options.addStringOption("header").value = ""
    options.stylesheetFile = new File(projectDir, "gradle/stylesheet.css");

    source = sourceSets.main.allJava


    options.links(
            "https://docs.oracle.com/javase/7/docs/api/",
            "http://www.reactive-streams.org/reactive-streams-${reactiveStreamsVersion}-javadoc/"
    )


    if (JavaVersion.current().isJava7()) {
        // "./gradle/stylesheet.css" only supports Java 7
        options.addStringOption("stylesheetfile", rootProject.file("./gradle/stylesheet.css").toString())
    }
}

animalsniffer {
    annotation = "io.reactivex.internal.util.SuppressAnimalSniffer"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}



test {

    testLogging  {
        // showing skipped occasionally should prevent CI timeout due to lack of standard output
        events=["skipped", "failed"] // "started", "passed"
        // showStandardStreams = true
        exceptionFormat="full"

        debug.events = ["skipped", "failed"]
        debug.exceptionFormat="full"

        info.events = ["failed", "skipped"]
        info.exceptionFormat="full"

        warn.events = ["failed", "skipped"]
        warn.exceptionFormat="full"
    }

    maxHeapSize = "1200m"

    if (System.getenv("CI") == null) {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }
}

task testng(type: Test) {
    useTestNG()
    testLogging  {
        events=["skipped", "failed"]
        exceptionFormat="full"

        debug.events = ["skipped", "failed"]
        debug.exceptionFormat="full"

        info.events = ["failed", "skipped"]
        info.exceptionFormat="full"

        warn.events = ["failed", "skipped"]
        warn.exceptionFormat="full"
    }
}

check.dependsOn testng

jacoco {
    toolVersion = jacocoVersion // See http://www.eclemma.org/jacoco/.
}

task GCandMem(dependsOn: "check") doLast {
    print("Memory usage before: ")
    println(java.lang.management.ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed() / 1024.0 / 1024.0)
    System.gc()
    Thread.sleep(200)
    print("Memory usage: ")
    println(java.lang.management.ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed() / 1024.0 / 1024.0)
}

task GCandMem2(dependsOn: "test") doLast {
    print("Memory usage before: ")
    println(java.lang.management.ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed() / 1024.0 / 1024.0)
    System.gc()
    Thread.sleep(200)
    print("Memory usage: ")
    println(java.lang.management.ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed() / 1024.0 / 1024.0)
}

testng.dependsOn GCandMem2

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["io/reactivex/tck/**"])
        })
    }
}

jacocoTestReport.dependsOn GCandMem

build.dependsOn jacocoTestReport

checkstyle {
    configFile file("checkstyle.xml")
    ignoreFailures = true
    toolVersion ="8.14"
}

apply from: file("gradle/javadoc_cleanup.gradle")